<?php
/**
 * Plugin Name: WP Rocket | Custom Cache Folders
 * Description: Use custom folder for WP Rocket cache files. 
 * Plugin URI:  https://github.com/wp-media/wp-rocket-helpers/tree/master/cache/wp-rocket-cache-custom-folders
 * Author:      WP Rocket Support Team
 * Author URI:  http://wp-rocket.me/
 * License:     GNU General Public License v2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 *
 * Copyright SAS WP MEDIA 2018
 */

namespace WP_Rocket\Helpers\wp_rocket_custom_cache_folders;

// Standard plugin security, keep this line in place.
defined( 'ABSPATH' ) or die();

// EDIT HERE:

// Specify your custom cache folder. Do not forget the trailing slash. 
define( 'CUSTOM_WP_ROCKET_CACHE_ROOT_PATH', WP_CONTENT_DIR . '/your-custom-folder/' );
// Specify the URL to the custom cache folder. 
define( 'CUSTOM_WP_ROCKET_CACHE_ROOT_URL', 'http://example.com/wp-content/your-custom-folder/' );

// STOP EDITING

/**
 * Filter the contents of advanced-cache.php to reflect new folders
 * 
 * @param (string) $buffer Contents of the advanced-cache.php as generated by the get_rocket_advanced_cache_file() WP Rocket function. 
 * 
 * @author Arun Basil Lal
 */
function modify_advanced_cache_file( $buffer ) {
	
	$buffer  = preg_replace( '/(\$rocket_cache_path  =).+/', '$rocket_cache_path  = \'' . CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . "wp-rocket/';", $buffer, 1 );
	$buffer .= "\n";
	$buffer .= "define( 'WP_ROCKET_CACHE_ROOT_PATH'	, '" . CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . "' );\n";
	$buffer .= "define( 'WP_ROCKET_CACHE_ROOT_URL'	, '" . CUSTOM_WP_ROCKET_CACHE_ROOT_URL . "' );";
	
	return $buffer;
}
add_filter( 'rocket_advanced_cache_file', __NAMESPACE__ . '\modify_advanced_cache_file' );

/**
 * Restore the contents of advanced-cache.php with default folders.
 * 
 * @param (string) $buffer Contents of the advanced-cache.php as generated by the get_rocket_advanced_cache_file() WP Rocket function. 
 * 
 * @author Arun Basil Lal
 */
function restore_advanced_cache_file( $buffer ) {
	
	$buffer  = preg_replace( '/(\$rocket_cache_path  =).+/', '$rocket_cache_path  = \'' . WP_CONTENT_DIR . "/cache/wp-rocket/';", $buffer, 1 );
	
	return $buffer; 
}

/**
 * Filter the rewrite rules in .htaccess to match custom folders.
 * 
 * @param (string) $rules Rewrite rules from get_rocket_htaccess_mod_rewrite() WP Rocket function. 
 * 
 * @author Arun Basil Lal
 */
function modify_htaccess_rewrite_rules( $rules ) {
	
	// @link https://github.com/wp-media/wp-rocket/blob/33578f0dd568819d3e5912e38cafb9d51d5964d7/inc/functions/htaccess.php#L185-L192
	$is_1and1_or_force = apply_filters( 'rocket_force_full_path', strpos( $_SERVER['DOCUMENT_ROOT'], '/kunden/' ) === 0 );
	
	if ( $is_1and1_or_force ) {
		$rules = str_replace( WP_ROCKET_CACHE_PATH, CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . 'wp-rocket/', $rules );
	} else {
		
		$site_root = rocket_extract_url_component( site_url(), PHP_URL_PATH );
		$site_root = isset( $site_root ) ? trailingslashit( $site_root ) : '';
		
		// Get cache root.
		if ( strpos( ABSPATH, WP_ROCKET_CACHE_PATH ) === false ) {
			$cache_root = str_replace( $_SERVER['DOCUMENT_ROOT'] , '', WP_ROCKET_CACHE_PATH );
		} else {
			$cache_root = $site_root . str_replace( ABSPATH, '', WP_ROCKET_CACHE_PATH );
		}
		
		// Get new cache root
		if ( strpos( ABSPATH, CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . 'wp-rocket/' ) === false ) {
			$new_cache_root = str_replace( $_SERVER['DOCUMENT_ROOT'] , '', CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . 'wp-rocket/' );
		} else {
			$new_cache_root = $site_root . str_replace( ABSPATH, '', CUSTOM_WP_ROCKET_CACHE_ROOT_PATH . 'wp-rocket/' );
		}
		
		$rules = str_replace( $cache_root, $new_cache_root, $rules );
	}
	
	return $rules;
}
add_filter( 'rocket_htaccess_mod_rewrite', __NAMESPACE__ . '\modify_htaccess_rewrite_rules' );

/**
 * Restore the rewrite rules in .htaccess with default folders.
 * 
 * @param (string) $rules Rewrite rules from get_rocket_htaccess_mod_rewrite() WP Rocket function. 
 * 
 * @author Arun Basil Lal
 */
function restore_htaccess_rewrite_rules( $rules ) {
	
	// @link https://github.com/wp-media/wp-rocket/blob/33578f0dd568819d3e5912e38cafb9d51d5964d7/inc/functions/htaccess.php#L185-L192
	$is_1and1_or_force = apply_filters( 'rocket_force_full_path', strpos( $_SERVER['DOCUMENT_ROOT'], '/kunden/' ) === 0 );
	
	if ( $is_1and1_or_force ) {
		$rules = str_replace( WP_ROCKET_CACHE_PATH, WP_CONTENT_DIR . '/cache/wp-rocket/', $rules );
	} else {
		
		$site_root = rocket_extract_url_component( site_url(), PHP_URL_PATH );
		$site_root = isset( $site_root ) ? trailingslashit( $site_root ) : '';
		
		// Get cache root.
		if ( strpos( ABSPATH, WP_ROCKET_CACHE_PATH ) === false ) {
			$cache_root = str_replace( $_SERVER['DOCUMENT_ROOT'] , '', WP_ROCKET_CACHE_PATH );
		} else {
			$cache_root = $site_root . str_replace( ABSPATH, '', WP_ROCKET_CACHE_PATH );
		}
		
		// Get new cache root
		if ( strpos( ABSPATH, WP_CONTENT_DIR . '/cache/wp-rocket/' ) === false ) {
			$new_cache_root = str_replace( $_SERVER['DOCUMENT_ROOT'] , '', WP_CONTENT_DIR . '/cache/wp-rocket/' );
		} else {
			$new_cache_root = $site_root . str_replace( ABSPATH, '', WP_CONTENT_DIR . '/cache/wp-rocket/' );
		}
		
		$rules = str_replace( $cache_root, $new_cache_root, $rules );
	}
	
	return $rules;
}

/**
 * Delete all the cache files generated by WP Rocket and regenerate .htaccess.
 * 
 * This needs to be done before the new cache folder constants are in effect. 
 * If not, WP Rocket will clean / manage the new cache folder and the old files will exist on the server forever. 
 * The rewrite rules in the .htaccess also needs to be rewritten. 
 *
 * @author Arun Basil Lal
 */
function clean_cache_files() {

	if ( ! function_exists( 'rocket_generate_advanced_cache_file' )
	  || ! function_exists( 'flush_rocket_htaccess' ) ) {
		
		return false;
	}
	
	// Delete all existing cache files and folders before switching the cache folders. 
	rocket_rrmdir( WP_ROCKET_CACHE_ROOT_PATH . 'wp-rocket/' );
	rocket_rrmdir( WP_ROCKET_CACHE_ROOT_PATH . 'min/' );
	rocket_rrmdir( WP_ROCKET_CACHE_ROOT_PATH . 'busting/' );
	rocket_rrmdir( WP_ROCKET_CACHE_ROOT_PATH . 'critical-css/' );
	
	// Regenerate advanced-cache.php
	rocket_generate_advanced_cache_file();
	
	// Update WP Rocket .htaccess rules.
	flush_rocket_htaccess();
}
register_activation_hook( __FILE__, __NAMESPACE__ . '\clean_cache_files' );

/**
 * Clean all the cache files on uninstall. 
 * 
 * The same as activation, the custom cache folder needs to be cleaned before the 
 * constants are unhooked.
 *
 * @author Arun Basil Lal
 */
function deactivate() {
	
	if ( ! function_exists( 'rocket_generate_advanced_cache_file' )
	  || ! function_exists( 'flush_rocket_htaccess' ) ) {
		
		return false;
	}
	
	// Remove the custom cache folder.
	rocket_rrmdir( WP_ROCKET_CACHE_ROOT_PATH );
	
	// Remove the customizations in advanced-cache.php. 
	remove_filter( 'rocket_advanced_cache_file', __NAMESPACE__ . '\modify_advanced_cache_file' );
	
	// Restore default $rocket_cache_path in advanced-cache.php.
	add_filter( 'rocket_advanced_cache_file', __NAMESPACE__ . '\restore_advanced_cache_file' );
	
	// Regenerate advanced-cache.php
	rocket_generate_advanced_cache_file();
	
	// Remove rewrite rules in .htaccess for custom folders.
	remove_filter( 'rocket_htaccess_mod_rewrite', __NAMESPACE__ . '\modify_htaccess_rewrite_rules' );
	
	// Restore the rewrite rules in .htaccess with default folders.
	add_filter( 'rocket_htaccess_mod_rewrite', __NAMESPACE__ . '\restore_htaccess_rewrite_rules' );
	
	// Update WP Rocket .htaccess rules.
	flush_rocket_htaccess();
}
register_deactivation_hook( __FILE__, __NAMESPACE__ . '\deactivate' );

/**
 * Remove all cache files.
 *
 * @link https://github.com/wp-media/wp-rocket/blob/33578f0dd568819d3e5912e38cafb9d51d5964d7/uninstall.php#L25-L48
 *
 * @param string $dir Path to directory.
 */
function rocket_rrmdir( $dir ) {

	if ( ! is_dir( $dir ) ) {
		@unlink( $dir );
		return;
	}

	$globs = glob( $dir . '/*', GLOB_NOSORT );
	if ( $globs ) {
		foreach ( $globs as $file ) {
			is_dir( $file ) ? rocket_rrmdir( $file ) : @unlink( $file );
		}
	}

	@rmdir( $dir );
}